# Про lambda-функции
def square1(x):
    return x ** 2


square2 = lambda x: x ** 2

print(square1(2))
print(square2(2))

def summa(x, y):
    return x + y

summa1 = lambda x, y: x + y
============================
# map
sp = ["1", "2", "3", "4"]
sp1 = map(int, sp)
for i in sp1:
    print(i)

sp = [1, 2, 3, 4, 5]
sp1 = map(lambda x: x ** 2, sp)
for i in sp1:
    print(i)
============================
# filter
sp = [1, 2, 3, 4, 5]
sp = filter(lambda x: x % 2 == 0, sp)
print(list(sp))
============================
# списочные выражения
sp = [x ** 2 for x in range(1, 6)]
sp = [x for x in range(1, 6) if x % 2 == 0]
============================
# превращение чисел, введенных через пробел, в тип int
sp = list(map(int, input().split()))
sp = [int(i) for i in input().split()]
============================
# zip
letters = ["a", "b", "c"]
numbers = [1, 2, 3]
print(*zip(letters, numbers))
============================
# enumerate
week = ["пн", "вт", "ср"]
for n, day in enumerate(week, 1):
    print(n, "-", day)

=========================
Задачи семинара
=========================
# 47
values = [1, 23, 42, 'asdfg']
transformed_values = list(map(lambda x: x, values))
if values == transformed_values:
    print('ok')
else:
    print('fail')

# 49
import math


def find_farthest_orbit(some_list):
    list_planets_area = [math.pi * elem[0] * elem[1] for elem in some_list if elem[0] != elem[1]]

    return some_list[list_planets_area.index(max(list_planets_area))]


orbits = [(1, 3), (2.5, 10), (7, 2), (6, 6), (4, 3)]
print(*find_farthest_orbit(orbits))

# 49
def find_farthest_orbit(lst):
    square_orbits = [int(3.14 * val[0] * val[1]) for val in lst if val[0] != val [1]]
    max_index = square_orbits.index(max(square_orbits))
    return lst[max_index]


orbits = [(1, 3), (2.5, 10), (7, 2), (6, 6), (4, 3)]
print(*find_farthest_orbit(orbits))

# 49
orbits = [(1, 3), (2.5, 10), (7, 2), (6, 6), (4, 3)]
el_orbs = list(filter(lambda x: x[0] != x[1], orbits))
find_max = max(el_orbs, key = lambda x: x[0]*x[1])
print(find_max)

# 51
def same_by(characteristic, objects):
    return all(characteristic(obj) == 0 for obj in objects)


values = [0, 2, 10, 6]
if same_by(lambda x: x % 2, values):
    print('same')
else:
    print('different')

# 51
def same_by(characteristic, objects):
    for i in objects:
        if characteristic(i) != characteristic(0):
            return False
    return True

values = [0, 2, 10, 6]
if same_by(lambda x: x % 2, values):
    print('same')
else:
    print('different')

# 51
values = [4, 6, 41]


def same_by(characteristic, objects):
    res = [characteristic(obj) for obj in objects]
    print(res)
    print(set(res))
    return len(set([characteristic(obj) for obj in objects])) <= 1


if same_by(lambda x: x % 2, values):
    print('same')
else:
    print("different")
